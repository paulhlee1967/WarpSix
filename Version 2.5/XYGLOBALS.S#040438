 LST OFF

* XYmodem Globals
* Public domain version 2.5.

* Instructions:
*
* Assemble this file to save the XYMODEM module.
*
* You can change the pathname used to SAVe the object
* code to whatever you desire. (The SAV is near the
* end of this file.)


W6 = 1

BEGIN = $8D00 ;we need up to $99FF
 ORG BEGIN-$2F00-$300-$400 ;for XYMODEM
 XC ON

* Firmware Addresses

CROUT = $FD8E
COUT = $FDED
CLREOL = $FC9C
PRBYTE = $FDDA
KEYBD = $C000
STROBE = $C010
OURCH = $57B

* ProDOS & Basic.System

MLI = $BF00
DATE = $BF90
TIME = $BF92
ERROUT = $BE09 ;BI err handler
BADCALL = $BE8B ;convert BI err to Aplsoft #
FREBUFR = $BEF8
VPATH1 = $BE6C

* Xmodem equates

SOH = $01
ACK = $06
NAK = $15
CAN = $18
EOT = $04
BS = $08
C = 'C' ;for crc option
K = 'K' ;for 1K option
L = 'L' ;for 4K option
G = 'G' ;for Ymodem-G option
   ;(Ymodem-G not supported)
STX = $02 ;for 1K block
SSTX = $82 ;for 4K block

* ProDOS Xmodem equates

SSOH = SOH+%10000000
SYN = $16
ETB = $17

* Zero page locations used

XPTR = $FA ;$FA & $FB
PRTADR = $FE ;$FE & $FF
CRC = $19 ;$19 & $1A
STOP = $1B ;$1B & $1C
SIZE = $1D ;$1D & $1E

* Main module dependencies

 LST ON
 DAT
DCDSTATE = BEGIN+$09
MOUTV = BEGIN+$0E
MBUFCKV = BEGIN+$11
MBUFINV = BEGIN+$14
CLEARV = BEGIN+$2C
REMFLG = BEGIN+$34
LEVEL = BEGIN+$36

STICS = BEGIN+$4E
SECONDS = BEGIN+$4F

OPATH = BEGIN+$59
OREFNUM = BEGIN+$5D
CLPARMS = BEGIN+$5E
CLREFNUM = BEGIN+$5F
RPARMS = BEGIN+$60
RREFNUM = BEGIN+$61
RBUFPTR = BEGIN+$62
RREQCNT = BEGIN+$64
RXFRCNT = BEGIN+$66

OPEN = BEGIN+$68
CLOSE = BEGIN+$6F
GETTIME = BEGIN+$76
DELAYV = BEGIN+$89
DELAYSECS = BEGIN+$94

CHKVBL = BEGIN+$A5

PRINT = BEGIN+$DB
DCD3 = BEGIN+$164
CURSORV = BEGIN+$16C
 LST OFF


* Xmodem Vector table

 LST ON
SENDV CLD
 JMP SEND

RECEIVEV CLD
 JMP RECEIVE

CATV JMP CATALOG
 LST OFF

* Xmodem Data and Flags

* XERROR is XA (Xmodem base Address) in BASIC.

 LST ON
XERROR DFB 0 ;error code for BASIC
PFLAG DFB 0 ;ProDOS info xfer flag
TRYPRO DFB 0 ;try ProDOS xfer flag
CRCFLAG DFB 0 ;CRC yes/no flag
KFLAG DFB 0 ;1k option active flag
LFLAG DFB 0 ;4k option active flag
BINARY2 DFB 0 ;flag for Binary II xfer
YFLAG DFB 0 ;Ymodem yes/no flag (unused)
 LST OFF

KSTART DFB 0 ;1k supported
LSTART DFB 0 ;4k supported

PACKNUM DFB 0 ;packet number
TRYCOUNT DFB 0 ;try count
ERRCOUNT DFB 0 ;total errors count
CANCOUNT DFB 0 ;cancel byte count
ENDFLAG DFB 0 ;end flag
NOWFLAG DFB 0 ;end now flag
CHECKSUM DFB 0 ;checksum byte

TIMEOUT DFB $0A ;10 second timeout default

LASTPAK DFB 0 ;packet number of lastpak
BADCNT DFB 0 ;# of consec. bad paks.
GOODCNT DFB 0 ;# of consec. good paks.

OURDATE DW $0000
OURTIME DW $0000

NEOFPARMS DFB $02 ;parm count
 DFB $00 ;refnum
EOFSAVE DS 3

 DW $0000

 TR ON
OURPATH DS 65
 TR OFF

* Get_Mark parms

GMPARMS DFB $02 ;parm count
GMREFNUM DFB 0
PCLOW DFB 0 ;counter for bytes transferred
PCMID DFB 0
PCHIGH DFB 0

* Create parms

CPARMS DFB $07 ;parm count
CPATH DW $0000 ;pathname ptr
CACCESS DFB $E3 ;access
CTYPE DFB $04 ;text file type
CAUXTYP DW $0000 ;Aux type
 DFB $01 ;storage type
CDATE DW $0000
CTIME DW $0000

* Write parms

WPARMS DFB $04 ;parm count
WREFNUM DFB $00
WBUFPTR DA FILEBUF
WREQCNT DW $0000
WXFERCNT DW $0000

* Destroy parms

DPARMS DFB $01 ;parm count
DPATH DW $0000 ;pathname ptr

* Code begins here...

* GETEOF. Requires file refnum be stored in
* at EOFPARMS+1.

 LST ON
GETEOF LDA #2 ;set up parm list
 STA EOFPARMS ;parm count
 LST OFF
 LDA #0
 STA EOFPARMS+2 ;low byte
 STA EOFPARMS+3 ;mid byte
 STA EOFPARMS+4 ;high byte

 JSR MLI
 DFB $D1 ;get_eof
 DA EOFPARMS ;point to location in buffer
 RTS ;return with any error

* CREATEs a file. Assumes parm list set up.

CREATE JSR MLI ;create file
 DFB $C0 ;assumes parm list set
 DA CPARMS
 RTS

* DESTROY file pointed to by VPATH1
* Assumes file is closed, and unlocked.

DESTROY LDA VPATH1 ;copy pathname pointer
 STA DPATH
 LDA VPATH1+1
 STA DPATH+1
 JSR MLI ;destroy the file
 DFB $C1
 DA DPARMS
 RTS

* Data area for Ymodem

 LST ON
FIXNAME DFB 0
YCOUNT DFB 0
YTOTAL DFB 0
 LST OFF

* Figure out the address of the end of our packet buffer
* so we can stop at that point. Save in STOP & STOP+1.
* Trashes A.

SETSTOP CLC
 LDA #<PACKBUF ;get low byte
 ADC SIZE ;add to SIZE low byte
 STA STOP ;save result

 LDA #>PACKBUF ;get high byte
 ADC SIZE+1
 STA STOP+1 ;save result

:EXIT RTS

* Send 8 CAN chars, 1 EOT and 9 Backspaces

CANCEL LDA #CAN
 LDY #8
:LOOP1 JSR MOUTV
 DEY
 BNE :LOOP1
 LDA #EOT
 JSR MOUTV
 LDA #BS
 LDY #9
:LOOP2 JSR MOUTV
 DEY
 BNE :LOOP2
 RTS

PROMPT
 JSR PRINT
 HEX 8D
 ASC "Ready."
 HEX 8D00
 RTS

* Handle MLI Error by passing it to BASIC

MLIERR
 JSR BADCALL ;convert to BI error
 JMP ERROUT ;exit to BI

* Buffers for Xmodem module.

 LST ON

 DS \

FILEBUF EQU *
GETPARMS EQU *
 LST OFF
 TR ON
PACKBUF DS 18
EOFPARMS DS 4096-18
 LST OFF
 TR OFF

SETMARK EQU *
GETMARK
 JSR MLI
MARK DFB $CF ;get_mark
 DA GMPARMS
 RTS  ;currently ignores errors

* CSUMCALC calculate cumulative checksum

CSUMCALC CLC ;always toss carry
 ADC CHECKSUM ;add data byte
 STA CHECKSUM ;save.
 RTS

* PACKCLR clear packet buffer with value in PKBYTE
* Works with any size packet.

PACKCLR LDA #<PACKBUF ;set up pointer
 STA XPTR
 LDA #>PACKBUF
 STA XPTR+1
 JSR SETSTOP ;set up STOP location

* Loop below does all data bytes in the packet

CLR LDY #0 ;no offset
 DFB $A9 ;LDA immediate

PKBYTE DFB $1A ;Control-Z

 STA (XPTR),Y ;write to buffer

 INC XPTR ;always inc low byte
 LDA XPTR ;check if low byte 0
 BNE :CHECK ;if non zero, continue
 INC XPTR+1 ;if zero, inc high byte

:CHECK LDA STOP ;low byte of packbuf
 CMP XPTR
 BNE CLR

 LDA STOP+1 ;load high byte
 CMP XPTR+1
 BNE CLR

:END RTS  ;we're done!

* PACKZERO write 00 characters to our packet buffer
* Works with any size packet.

PACKZERO LDA #0
 STA PKBYTE ;write zeroes
 JSR PACKCLR ;do it
 LDA #$1A ;Control-Z
 STA PKBYTE ;restore default
 RTS

* Get a byte with timeout

GETBYTE PHY  ;save Y
 PHX  ;save X

 LDA TIMEOUT ;copy timeout value
 STA SECONDS
 LDA #60
 STA STICS

:READ JSR MBUFCKV
 BEQ :NODATA
 JSR MBUFINV ;character in A

:EXIT PLX  ;pull X
 PLY  ;pull Y
 CLC
 RTS

:NODATA JSR CHKVBL
 LDA SECONDS
 BNE :READ

:TIME PLX  ;pull X
 PLY  ;pull Y
 SEC  ;timed out
 RTS

* Set up bytes transferred display

DISPLAY0 PHP ;save status

 STA :SAVEA ;save all registers
 STY :SAVEY
 STX :SAVEX

 LDX REMFLG
 STX :SAVER
 LDX #0
 STX REMFLG ;output to screen only

 JSR PRINT ;use our own print rtn
 HEX 8D
 ASC "Bytes:         0 "
 ASC "     Retries:   0"
 HEX 00

 LDA :SAVER
 STA REMFLG
 LDA :SAVEA ;restore registers
 LDY :SAVEY
 LDX :SAVEX
 PLP ;get saved status
 RTS
:SAVEA HEX 00
:SAVEY HEX 00
:SAVEX HEX 00
:SAVER HEX 00

* Update bytes transferred display on screen.

DISPLAY PHP ;save status

 STA :SAVEA ;save registers
 STY :SAVEY
 STX :SAVEX

 LDX REMFLG ;save REMFLG
 STX :SAVER
 LDX #0
 STX REMFLG ;output to screen only

* Position cursor

 LDY #8
 JSR SETH

* now print bytes transferred in decimal

 LDA #" "
 LDX #7
:SPACED STA LENBUF,X ;fill buffer with spaces
 DEX
 BNE :SPACED
 LDA PCHIGH
 STA ACCH ;save high byte
 LDX PCMID ;medium byte in X
 LDA PCLOW ;low byte in A
 LDY #7 ;# of chars to print -1
 JSR HEXDEC
 JSR PRINTL ;print length

 LDY #30
 JSR SETH
 LDA #" "
 STA LENBUF
 STA LENBUF+1
 STA LENBUF+2

 LDA #0
 STA ACCH ;save high byte
 LDX #0 ;medium byte in X
 LDA ERRCOUNT ;low byte in A
 LDY #2 ;# of chars to print -1
 JSR HEXDEC

 LDA #0
 STA LENBUF+3
 LDA #$80 ;BRA instruction
 STA LENBUF+4
 LDA #3 ;skip over 4 bytes
 STA LENBUF+5
 JSR PRINTL ;print length

 LDA :SAVER ;restore everything
 STA REMFLG
 LDA :SAVEA
 LDY :SAVEY
 LDX :SAVEX
 PLP ;get saved status
 RTS

:SAVEA HEX 00
:SAVEY HEX 00
:SAVEX HEX 00
:SAVER HEX 00


** Print CR on local display only

DISPLAYX PHP ;save status

 STA :SAVEA ;save registers

 LDX REMFLG ;save REMFLG
 STX :SAVER
 LDX #0
 STX REMFLG ;output to screen only

 LDA #$8D
 JSR COUT

 LDA :SAVER ;restore everything
 STA REMFLG
 LDA :SAVEA
 PLP ;get saved status
 RTS

:SAVEA HEX 00
:SAVER HEX 00

* Convert standard ASCII char to lowercase
* (Used for Ymodem pathnames)

DNSHIFT CMP #'A'
 BLT :NO
 CMP #'Z'+1
 BGE :NO
 ORA #%00100000 convert to lowercase
:NO RTS

* Ymodem filenames stored here...

 TR ON
YPATHS DS 255
 TR OFF

SETH STY OURCH
 RTS

MACBINARY DFB 0
FIRST DFB 0

 PUT CAT ;our catalog routine
 PUT SEND ;XYModem send module
 PUT RECEIVE ;XModem receive
 PUT CRC ;CRC calc routines
 PUT END2

 SAV /WARP6/V25/DRIVERS/XYMODEM
