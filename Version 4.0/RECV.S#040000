* Receive (XMODEM)

* Entry point for Xmodem RECEIVE command

RECV

* Set up initial variables and flags.

 STZ XERROR ;error code for BASIC
 STZ PFLAG ;don't assume ProDOS
 STZ PACKNUM ;zero packet number
 STZ LASTPAK
 STZ FIRST
 STZ ERRCOUNT ;v2.5 fix!

 STZ CRC ;zero these before sending
 STZ CRC+1
 STZ CHECKSUM

 STZ PCLOW
 STZ PCMID
 STZ PCHIGH

* Note: K and L flags set by the calling program,
* but they are only used by this module to determine
* what handshake to send at start, ie, C, CK, or CKL.

 STZ SIZE+1
 LDA #$80
 STA SIZE ;Default 128 byte packets
   ;is updated on receipt of
   ;STX or SSTX.

 LDA #$FF ;always assume CRC
 STA CRCFLAG

 LDA #3 ;3 tries for CRC mode
 STA TRYCOUNT
 LDA #10
 STA TIMEOUT ;10 sec timeout

* Get ready to create the file to receive

 JSR GETTIME ;get current date/time

 LDA DATE ;set parms for CREATE
 STA CDATE
 STA OURDATE
 LDA DATE+1
 STA CDATE+1
 STA OURDATE+1
 LDA TIME
 STA CTIME
 STA OURTIME
 LDA TIME+1
 STA CTIME+1
 STA OURTIME+1

 LDA #$E3 ;full access
 STA CACCESS
 LDA #$04
 STA CTYPE ;text file type

 STZ CAUXTYP
 STZ CAUXTYP+1
 LDA #$01 ;seedling
 STA CAUXTYP+2 ;storage type

 LDA VPATH1 ;get selected pathname
 STA CPATH ;and add to parm list
 LDA VPATH1+1
 STA CPATH+1

 JSR CREATE ;create the file
 BNE :ERROR1 ;handle any error

 LDA VPATH1 ;set pointer to filename
 STA OPATH ;in OPEN parms
 LDA VPATH1+1
 STA OPATH+1

:XOPEN JSR OPEN ;open newly created file
 BEQ :READY ;if no error, we're ready

 PHA  ;save error code
 JSR CLOSE ;close file
 JSR DESTROY ;delete it
 PLA  ;restore error code
:ERROR1 JMP MLIERR

* We're ready; file is open.

:READY LDA OREFNUM ;save refnum for WRITE
 STA WREFNUM
 STA GMREFNUM
 STA CLREFNUM

 JSR PROMPT ;tell user we're ready

 DO W6
 LDA #8
 JSR DELAYSECS ;give user time to get ready
 FIN

 JSR DISPLAY0 ;set up bytes xferred display
 LDA DCDSTATE ;check for carrier presence
 BEQ RCVINIT ;zero means carrier present.
 JMP RCVABORT1 ;abort if carrier lost

* Receive Init CRC state
* try CRC initiation 3 times.

RCVINIT

* Always try CRC before checksum
*
* LDA CRCFLAG
* BNE :CINIT
* JMP RCVCSUM ;if CRC off, do checksum

:CINIT LDA #C ;send 'C'
 JSR MOUTV

 LDA KFLAG
 BEQ :NEXT0
 LDA #K ;send 'K'
 JSR MOUTV

:NEXT0 LDA LFLAG
 BEQ :NEXT
 LDA #K
 JSR MOUTV ;send 'KL'
 LDA #L
 JSR MOUTV

:NEXT JSR GETBYTE ;get response
 BCS :DORETRY ;timeout
 CMP #SSOH ;ProDOS special SOH?
 BEQ :GOPRO ;handle startup ProDOS packet
 CMP #SOH ;standard SOH?
 BEQ GORECV1
 CMP #STX
 BEQ READY1K
 CMP #SSTX
 BEQ READY4K
 CMP #NAK ;NAK?
 BEQ :DORETRY
 CMP #CAN ;CANcel?
 BEQ INABORT
 BNE :NEXT ;ignore unknown chars

:DORETRY DEC TRYCOUNT ;decrement trycount
 INC ERRCOUNT
 LDA TRYCOUNT ;too many tries?
 BEQ RCVCSUM ;if so, try checksum mode
 LDA DCDSTATE
 BEQ :CINIT
 JMP RCVABORT1

:GOPRO LDA #3 ;reset trycount
 STA TRYCOUNT
 JMP RCVPRO1

READY1K
 STZ SIZE
 LDA #$04
 STA SIZE+1
 BNE GORECV1 ;always
READY4K
 STZ SIZE
 LDA #$10
 STA SIZE+1

GORECV1 LDA #10 ;reset trycount
 STA TRYCOUNT
 INC PACKNUM ;from 00 to 01
 JMP RCVDATA1

INABORT JMP RCVABORT1 ;we rec'd CAN or EOT

* Receive Init Checksum state
* normal Xmodem fallback after CRC failed.

RCVCSUM
 STZ CRCFLAG ;too many tries, fall back
 ;to standard Xmodem
 LDA #10 ;reset trycount
 STA TRYCOUNT

:RETRY LDA #NAK ;send NAK
 JSR MOUTV
 JSR GETBYTE ;await response
 BCS :DORETRY ;timeout
 CMP #SOH ;SOH?
 BEQ GORECV1
 CMP #SSOH
 BEQ :GOPRO
 CMP #CAN ;CANcel?
 BEQ INABORT
 CMP #EOT ;EOT = CAN
 BEQ INABORT

:CHK1K CMP #STX
 BNE :CHK4K
:CHK4K CMP #SSTX
 BNE :DORETRY

* I think the following two lines are redundant.
*
* LDA #$FF
* STA CRCFLAG

 JMP RCVDATA+$15 ;to :CHK1K in RCVDATA

:DORETRY DEC TRYCOUNT ;if other char received, retry.
 INC ERRCOUNT
 LDA TRYCOUNT
 BEQ INABORT
 LDA DCDSTATE
 BEQ :RETRY
 JMP RCVABORT1

:GOPRO LDA #3
 STA TRYCOUNT
 BNE RCVPRO1 ;always

* RCVPRO0: used when retrying ProDOS startup packet
* Allows for fallback to standard Xmodem.

RCVPRO0 JSR GETBYTE
 BCS :RETRY ;timed out

 CMP #SSOH ;ProDOS special SOH?
 BEQ RCVPRO1
 CMP #SOH ;regular SOH?
 BEQ GORECV1

:RETRY DEC TRYCOUNT
 INC ERRCOUNT
 LDA TRYCOUNT
 BEQ :GOABORT

 LDA DCDSTATE
 BEQ :RETRY1
 JMP RCVABORT1

:RETRY1 LDA #NAK
 JSR MOUTV
 BRA RCVPRO0 ;always

:GOABORT JMP RCVABORT

* RCVPRO1: get balance of ProDOS startup packet
* Packet is 81 00 FF. 00 is filetype.

RCVPRO1 JSR GETBYTE ;get filetype (00 for ProDOS)
 BCS :DORETRY
 STA :TYPE ;save for EOR byte

 JSR GETBYTE ;get filetype - FF
 EOR #$FF
 CMP :TYPE ;correct?
 BNE :DORETRY ;no.

 LDA #$FF ;success! Flags as ProDOS xfer.
 STA PFLAG
 INC PACKNUM ;from 00 to 01

 LDA #10 ;reset trycount
 STA TRYCOUNT
 STZ BINARY2 ;don't mix ProDOS and Binary2

 LDA #ACK ;ACK ProDOS startup packet
 JSR MOUTV
 BRA RCVDATA ;always

:DORETRY DEC TRYCOUNT
 INC ERRCOUNT
 LDA TRYCOUNT
 BEQ :GOABORT
 LDA DCDSTATE
 BEQ RCVPRO0
:GOABORT JMP RCVABORT1

:TYPE DFB $0

* Receive Data state
* This is where all data blocks are received and written
* to disk.

RCVDATA JSR GETBYTE ;1st get header
 BCS :TIMEOUT
 CMP #SOH ;128 header?
 BNE :CHK1K
 LDA #$80
 STA SIZE
 STZ SIZE+1
 BRA RCVDATA1 ;always
:CHK1K CMP #STX
 BNE :CHK4K
 STZ SIZE
 LDA #$04
 STA SIZE+1
 BNE RCVDATA1 ;always
:CHK4K CMP #SSTX
 BNE :CAN
 STZ SIZE
 LDA #$10
 STA SIZE+1
 BNE RCVDATA1 ;always
:CAN CMP #CAN
 BNE :EOT
 JMP RCVABORT1 ;abort if CAN received
:EOT CMP #EOT ;end?
 BEQ :GOPRO

 JSR CLEAR ;unknown char received,
  ;wait for line to clear
 BRA :TIMEOUT ;branch!

:GOPRO JMP PRODOS2 ;ACK EOT and check ProDOS mode

:TIMEOUT DEC TRYCOUNT ;dec trycount, do NAK
 INC ERRCOUNT
 LDA TRYCOUNT
 BEQ :GOABORT

 LDA DCDSTATE
 BEQ :TIMEOUT1
 JMP RCVABORT1

:TIMEOUT1 LDA #NAK ;send NAK on timeout
 JSR MOUTV
 BRA RCVDATA ;always!

:GOABORT JMP RCVABORT ;CANcel - too many tries.

* RCVDATA1: gains control after the first header
* byte is received.

RCVDATA1 JSR GETBYTE ;packet number
 BCC :CMP
 JMP :TIMEOUT ;timed out
:CMP CMP PACKNUM ;compare to our packet #
 BEQ :GETEOR ;if same, all is well

* If packet number coming in is same as the last one,
* we should ACK it but not write it to disk, and
* not increment any counters.

 CMP LASTPAK
 BNE :BADNUM
 JSR CLEAR
 JMP :ACK1

* If packet number an unexpected number, NAK it,
* and increment all counters.

:BADNUM JSR CLEAR
 JMP :TIMEOUT

* Normal flow continues here with EOR byte

:GETEOR JSR GETBYTE ;block number's one's complement
 BCC :GETEOR1
 JMP :TIMEOUT
:GETEOR1 EOR #$FF
 CMP PACKNUM ;MUST be equal
 BNE :BADNUM ;if not, NAK the packet

:GETDATA
 LDY #0 ;no offset
 LDA #<PACKBUF ;set up pointer
 STA XPTR
 LDA #>PACKBUF
 STA XPTR+1

 JSR SETSTOP ;trashes A

* Loop below does all data bytes in the packet

:GET1 JSR GETBYTE ;get a byte
 BCS :TIMEOUT ;timed out in packet

 STA (XPTR),Y ;save it

 BIT CRCFLAG
 BPL :CSUM0
 JSR CRCCALC
 BRA :DOINC
:CSUM0 JSR CSUMCALC

:DOINC INC XPTR ;always inc low byte
 LDA XPTR ;check if low byte 0
 BNE :CHECK ;if non zero, continue
 INC XPTR+1 ;if zero, inc high byte

:CHECK LDA STOP ;low byte of packbuf
 CMP XPTR
 BNE :GET1 ;not finished packet

 LDA STOP+1 ;load high byte
 CMP XPTR+1
 BNE :GET1 ;not finished packet

* Packet data received, now get error check stuff

 BIT CRCFLAG ;got data, now get CRC or CSUM
 BPL :CSUM

 JSR GETBYTE ;get 1st CRC byte
 BCS :TIMEOUT ;handle timeout
 CMP CRC+1 ;same?
 BEQ :CRC2
 JSR GETBYTE ;get last
 JMP :NAKNOW

:CRC2 JSR GETBYTE ;get 2nd CRC byte
 BCS :TIMEOUT
 CMP CRC
 BEQ :ACKPAK ;if good, ACK packet
 BNE :NAKNOW ;not good, NAK it.

:CSUM JSR GETBYTE
 BCS :TIMEOUT ;handle timeout
 CMP CHECKSUM
 BNE :NAKNOW
 BEQ :ACKPAK ;success

* Handle timeout and retries

:TIMEOUT DEC TRYCOUNT
 INC ERRCOUNT
 LDA TRYCOUNT
 BNE :NAKNOW
 JMP RCVABORT

:NAKNOW LDA #NAK ;express our displeasure
 JSR MOUTV
 JMP RCVDATA

:ACKPAK LDA KEYBD ;check for sysop abort
 BPL :ACKPAK2
 STA STROBE
 CMP #$9B ;ESC?
 BNE :ACKPAK2
 JMP RCVABORT ;abort transfer!

:ACKPAK2 LDA PACKNUM
 CMP #$01 ;first packet?
 BNE :ACK0 ;if not, don't check

 BIT FIRST
 BMI :ACK0 ;NOT FIRST PACKET!!

 LDA #$FF
 STA FIRST ;Do check only once.

* Check for MacBinary here

:REAL JSR MACBINCHK

* BIT BINARY2 ;Binary II enabled?
* BPL :ACK0

* Check if Binary II header

 LDA FILEBUF
 CMP #$0A
 BNE :NOTBIN
 LDA FILEBUF+1
 CMP #$47
 BNE :NOTBIN
 LDA FILEBUF+2
 CMP #$4C
 BNE :NOTBIN
 LDA FILEBUF+18
 CMP #$02
 BNE :NOTBIN
 LDA FILEBUF+127 ;number of files to follow
 BEQ :GOOD
 JMP BADBIN2

:GOOD LDA #$FF
 STA BINARY2
 JSR CLOSE ;close opened file.
 JSR DESTROY ;destroy original file
 JSR MAKEBIN ;create file from header

 LDA SIZE ;see if 128 byte packet
 CMP #$80 ;128 bytes?
 BEQ :UPDATE ;fine, get next one.
 JSR WRITEBIN ;write data after 128 bytes.
 BRA :UPDATE

:NOTBIN
 STZ BINARY2 ;shut off Binary2 flag!

:ACK0 JSR WRITEIT

:UPDATE INC PACKNUM
 JSR GETMARK ;update our byte counter
 JSR DISPLAY ;update on screen

 STZ CRC
 STZ CRC+1
 STZ CHECKSUM

 LDA PACKNUM ;update LASTPAK
 SEC
 SBC #1 ;subtract 1
 STA LASTPAK

:ACK1 LDA #ACK ;ACK
 JSR MOUTV
 JMP RCVDATA

* ProDOS 2 State: ACK EOT / see if ProDOS transfer

PRODOS2 INC PACKNUM

 LDA #5
 STA TIMEOUT

PRO25 LDA #ACK ;got EOT so send ACK
 JSR MOUTV

 LDA PFLAG ;check if ProDOS transfer
 BNE PRODOS3 ;if so, branch
 JMP DONE ;otherwise we are done.

* ProDOS3 State: send SYN and get ETB
* after ACKing the EOT, we send SYN and wait ETB.

PRODOS3 LDA #SYN ;send SYN
 JSR MOUTV

 JSR GETBYTE ;and get ETB
 BCS :TIMEOUT
 CMP #ETB
 BEQ :GOP4 ;go to PRODOS4
 CMP #CAN
 BEQ :GOABORT
 CMP #EOT
 BEQ PRO25 ;if EOT, send ACK again
:TIMEOUT DEC TRYCOUNT
 INC ERRCOUNT
 LDA TRYCOUNT
 BNE PRODOS3 ;try again
:GOABORT JMP PABORT
:GOP4 LDA #3
 STA TRYCOUNT ;reset trycount
 LDA #5
 STA TIMEOUT

* ProDOS 4 State
* Send NAK and await SOH of final packet

PRODOS4 LDA #NAK
 JSR MOUTV

 JSR GETBYTE ;1st get header
 BCS :TIMEOUT
 CMP #SOH ;header?
 BEQ PRODOS5 ;if so, get rest of packet
 CMP #CAN
 BNE :EOT
:ABORT JMP PABORT ;abort if CAN received

:EOT CMP #EOT
 BEQ :ABORT ;abort if EOT received
   ;if unknown, retry

:TIMEOUT DEC TRYCOUNT
 INC ERRCOUNT
 LDA TRYCOUNT
 BEQ :ABORT
 BNE PRODOS4

* ProDOS5 State: handle final packet
* Assumes packet is 128 bytes in length.

PRODOS5 JSR GETBYTE ;should be the packet number
 BCS :TIMEOUT ;timed out!
 CMP PACKNUM ;compare to our packnum
 BEQ :GETEOR ;if same, all is well
 CMP #$AA ;special packet number?
 BNE :BADNUM ;if not, NAK final packet
 STA PACKNUM ;save special packet number
 JMP :GETEOR

:BADNUM JSR CLEAR

:TIMEOUT
 LDA #10
 STA TIMEOUT ;back to 10 sec timeout

 DEC TRYCOUNT
 INC ERRCOUNT
 LDA TRYCOUNT
 BEQ :GOPABT

 LDA DCDSTATE
 BNE :GOABORT
 LDA #NAK
 JSR MOUTV
 JMP PRODOS4

:GOABORT JMP RCVABORT1

:GOPABT JMP PABORT

:GETEOR JSR GETBYTE ;block number's one's complement
 BCS :TIMEOUT
 EOR #$FF
 CMP PACKNUM ;MUST be equal
 BEQ :GET0
 JSR CLEAR ;wait for line to clear
 JMP :TIMEOUT ;NAK the packet

:GET0 LDY #0 ;prepare for ProDOS info packet
 STZ CRC ;zero these before receiving
 STZ CRC+1
 STZ CHECKSUM

:GETDATA JSR GETBYTE ;get each data byte
 BCS :TIMEOUT
 STA PACKBUF,Y ;save it in our packet buffer
 BIT CRCFLAG
 BPL :CSUM0
 JSR CRCCALC
 BRA :NEXT
:CSUM0 JSR CSUMCALC
:NEXT INY
 CPY SIZE ;done yet? Always 128 bytes
 BLT :GETDATA

 BIT CRCFLAG ;got data, now get CRC or CSUM
 BPL :CSUM

 JSR GETBYTE ;get 1st CRC byte
 BCS :TIMEOUT ;handle timeout
 CMP CRC+1 ;same?
 BEQ :CRC2
 JSR GETBYTE
 JMP :TIMEOUT ;try again

:CRC2 JSR GETBYTE
 BCS :TIMEOUT
 CMP CRC
 BEQ PRODOS6
 BNE :TIMEOUT

:CSUM JSR GETBYTE
 BCS :GOOUT ;handle timeout
 CMP CHECKSUM
 BEQ PRODOS6
:GOOUT JMP :TIMEOUT

* ProDOS6 State: ACK final packet and verify
* Any aborts here just go to DONE.

PRODOS6 LDA #ACK
 JSR MOUTV ;ACK ProDOS Packet

* check to see if data is valid

 LDA PACKBUF+1 ;check byte 1
 CMP #$D4
 BNE DONE ;invalid
 LDA PACKBUF+2 ;check byte 2
 CMP #$41
 BNE DONE ;invalid

 JSR SETINFO ;set the file info!

 LDA PACKBUF+18 ;check EOF parm count
 CMP #$02
 BNE :TIC203 ;not valid, or TIC 203

:EOF LDA #2 ;valid EOF data indicated
 STA EOFPARMS
 LDA WREFNUM
 STA EOFPARMS+1
 JSR MLI
 DFB $D0 ;set_eof!
 DA EOFPARMS ;point to location in buffer
 JMP DONE

:TIC203 LDA PACKBUF+17 ;TIC 2.03 puts it here
 CMP #$02
 BNE DONE ;if not, don't use EOF info
 LDA PACKBUF+22 ;TIC 2.03 always puts $FF here
 CMP #$FF
 BNE DONE ;if not, not TIC 2.03
 LDA PACKBUF+23 ;TIC 2.03 always puts $FF here
 CMP #$FF ;if not, not TIC 2.03
 BNE DONE
 LDA #2
 STA EOFPARMS-1 ;parm count
 LDA WREFNUM
 STA EOFPARMS ;our file
:SETEOF JSR MLI
 DFB $D0 ;set_eof!
 DA EOFPARMS-1 ;point to location in buffer

   ;fall through to DONE

DONE BIT BINARY2 ;in Binary 2 mode?
 BMI :NEWEOF
 JMP RCVDONE

* Fix EOF to match what we receive in Binary II
* header. Also try to fix mod date/time.

:NEWEOF LDA OREFNUM
 STA NEOFPARMS+1

 JSR MLI
 DFB $D0 ;set_eof
 DA NEOFPARMS
 BNE :ERROR

* (Do get_file_info, change the fields, then set.)

* GET_INFO on the file

:GETINFO LDA #<OURPATH ;pathname pointer
 STA GETPARMS+1
 LDA #>OURPATH
 STA GETPARMS+2
 LDA #$0A ;parm count
 STA GETPARMS
 LDY #3
 LDA #0
:LOOP STA GETPARMS,Y ;zero the parm table
 INY
 CPY #$12
 BLT :LOOP

 JSR MLI
 DFB $C4 ;GET_FILE_INFO
 DA GETPARMS ;point to packet buffer
 BNE :ERROR

* Now SET_INFO on the file to fix mod date/time

:SETINFO LDA GETPARMS+7
 CMP #$0D ;subdirectory?
 BNE :MOD
 JMP RCVDONE ;if so, don't bother

:MOD LDA OURDATE ;update modified date
 STA GETPARMS+10
 LDA OURDATE+1
 STA GETPARMS+11
 LDA OURTIME
 STA GETPARMS+12
 LDA OURTIME+1
 STA GETPARMS+13

 LDA #7 ;parm count
 STA GETPARMS
 STZ GETPARMS+7 ;zero blocks used field
 STZ GETPARMS+8 ;as SET doesn't use it.
 STZ GETPARMS+9

 DO W6

* LDA LEVEL
* CMP #9
* BEQ :SKIP

* Modify access so destroy/rename/write disabled

 LDA GETPARMS+3
 AND #%00111101 ;turn off those bits
 STA GETPARMS+3
 FIN

:SKIP JSR MLI
 DFB $C3 ;SET_FILE_INFO
 DA GETPARMS ;point to packet buffer
 BNE :ERROR
 JMP RCVDONE1

:ERROR PHA
 JSR CLOSE
 PLA
:ERROR1 JMP MLIERR

RCVDONE
 DO W6

* LDA LEVEL
* CMP #9
* BNE :LOCK
*
* JMP RCVDONE1

:LOCK JSR GETINFO ;on VPATH1 file

* Modify access so destroy/rename/write disabled

 LDA GETPARMS+3
 AND #%00111101 ;turn off those bits
 STA GETPARMS+3

 LDA #7 ;parm count
 STA GETPARMS
 STZ GETPARMS+7 ;zero blocks used field
 STZ GETPARMS+8 ;as SET doesn't use it.
 STZ GETPARMS+9

 JSR MLI
 DFB $C3 ;SET_FILE_INFO
 DA GETPARMS ;point to packet buffer
 BEQ RCVDONE1
 JMP MLIERR
 FIN

RCVDONE1 BIT MACBINARY
 BPL :DONE

 JSR FIXMAC

:DONE JSR CLOSE

 JSR DISPLAYX
 STZ XERROR
 CLC
 RTS

WRITEIT
 LDA SIZE
 STA WREQCNT
 LDA SIZE+1
 STA WREQCNT+1

 JSR MLI
 DFB $CB
 DA WPARMS
 BEQ :EXIT
 PHA
 JSR CANCEL
 PLA
 TAX
 PLA  ;nested; do a POP.
 PLA
 TXA
 JMP MLIERR
:EXIT RTS

* When 1K or 4K packet received with Binary II
* info, write all but first 128 bytes to file.
* 896 ($380) OR 3072 ($C00)

WRITEBIN LDA #<FILEBUF+128 ;set pointer to data
 STA WBUFPTR
 LDA #>FILEBUF+128
 STA WBUFPTR+1

 LDA SIZE+1 ;check if 4K
 CMP #$10
 BNE :SETK

 LDA #$80 ;write $0F80 bytes
 STA WREQCNT
 LDA #$0F
 STA WREQCNT+1
 BNE :WRITE

:SETK LDA #$80 ;1k mode, write $380 bytes.
 STA WREQCNT
 LDA #$03
 STA WREQCNT+1

:WRITE JSR MLI
 DFB $CB
 DA WPARMS
 BEQ :EXIT
 PHA
 JSR MLIERR
 JSR RCVABORT
 PLA
 TAX
 PLA  ;nested; do a POP.
 PLA
 TXA
 JMP MLIERR

:EXIT LDA #<FILEBUF ;restore buffer pointer
 STA WBUFPTR
 LDA #>FILEBUF
 STA WBUFPTR+1
 RTS

* Create a file based on Binary II info.
* Save EOF info for use after file received.
* Open the file so it will be ready for data.

MAKEBIN LDA #<FILEBUF+23 ;point to file/pathname
 STA CPATH
 LDA #>FILEBUF+23
 STA CPATH+1

 LDA FILEBUF+3 ;access

* Modify access so destroy/rename/write/read enabled

 ORA #%11000011 ;turn on those bits

 STA CACCESS

 LDA FILEBUF+4 ;file type
 STA CTYPE

 LDA FILEBUF+5 ;aux type
 STA CAUXTYP
 LDA FILEBUF+6
 STA CAUXTYP+1

 LDA FILEBUF+7 ;storage type
 CMP #$0D ;subdirectory file entry?
 BNE :OKAY ;if not, create seedling.

 STA CAUXTYP+3 ;otherwise, create file
 BEQ :OKAY1  ;with given storage type.

:OKAY LDA #$01
 STA CAUXTYP+3

:OKAY1 LDA OURDATE ;create date & time
 STA CDATE
 LDA OURDATE+1
 STA CDATE+1
 LDA OURTIME
 STA CTIME
 LDA OURTIME+1
 STA CTIME+1

 LDA FILEBUF+20 ;save EOF for later
 STA EOFSAVE
 LDA FILEBUF+21
 STA EOFSAVE+1
 LDA FILEBUF+22
 STA EOFSAVE+2

* Save pathname in OURPATH for use later

 LDA #<FILEBUF+23
 STA PRTADR
 LDA #>FILEBUF+23
 STA PRTADR+1
 LDY #0 ;set index var
 LDA (PRTADR),Y ;get length
 STA OURPATH ;put in buffer
 INC OURPATH
 INY  ;point at 1st char of fname

:COPY LDA (PRTADR),Y ;get a character
 STA OURPATH,Y ;put in buffer
 STA LINBUF-1,Y ;put in LINBUF
 CPY OURPATH ;done yet?
 BEQ :VUPDATE ;if so, continue
 INY
 BRA :COPY ;always

:VUPDATE
 DEC OURPATH

:TOBASIC LDA OURPATH num chars in A
 LDY #$02 3rd byte of descriptor
 STA (VARTAB),Y store string length
 INY  increment for next byte
 LDA #<LINBUF LSB of string start adr
 STA (VARTAB),Y
 INY  increment for next byte
 LDA #>LINBUF MSB of string start adr
 STA (VARTAB),Y

 LDA VPATH1
 STA PRTADR
 LDA VPATH1+1
 STA PRTADR+1
 LDY #0
 LDA OURPATH,Y
 STA (PRTADR),Y
 INC OURPATH

 LDY #1
:COPY0 LDA OURPATH,Y ;copy pathname
 STA (PRTADR),Y ;copy to VPATH1
 CPY OURPATH ;done yet?
 BEQ :CREATE
 INY
 BNE :COPY0 ;always

:CREATE DEC OURPATH

 JSR CREATE ;create the file
 BEQ :OPEN
:ERROR PHA
 JSR CANCEL
 PLA
 TAX
 PLA  ;nested; do a POP.
 PLA
 TXA
 JMP MLIERR

:OPEN LDA #<OURPATH ;set pointer to pathname
 STA OPATH
 LDA #>OURPATH
 STA OPATH+1 ;(buffer already pointed to)
 JSR OPEN
 BNE :ERROR

 LDA OREFNUM ;save refnum for WRITE
 STA WREFNUM
 STA GMREFNUM
 STA CLREFNUM

:EXIT RTS

* For final ProDOS packet info

SETINFO LDA VPATH1 ;pathname pointer
 STA GETPARMS+1
 LDA VPATH1+1
 STA GETPARMS+2

 LDA #7 ;parm count
 STA GETPARMS
 STZ GETPARMS+7 ;zero blocks used field
 STZ GETPARMS+8 ;as SET doesn't use it.
 STZ GETPARMS+9

 LDA OURDATE ;for date/time modified
 STA GETPARMS+$0A
 LDA OURDATE+1
 STA GETPARMS+$0B
 LDA OURTIME
 STA GETPARMS+$0C
 LDA OURTIME+1
 STA GETPARMS+$0D

 JSR MLI
 DFB $C3 ;SET_FILE_INFO
 DA GETPARMS ;point to packet buffer
 RTS

BADBIN2 JSR CLOSE
 JSR DESTROY
 JSR CANCEL
 JSR DELAYV
 JSR DELAYV
 JSR PRINT
 HEX 8D8D
 ASC "No Binary II multiple files, please.",8D
 ASC "Use ShrinkIt.",8D00
 LDA #4
 STA XERROR
 CLC
 RTS

* Receive Abort state

RCVABORT JSR CANCEL
RCVABORT1 JSR CLOSE
 JSR DESTROY ;erase file
 BEQ :EXIT
 JMP MLIERR
:EXIT LDA #1
 STA XERROR
 CLC
 RTS  ;and return.

PABORT JSR CANCEL
 JSR CLOSE
 STZ XERROR
 CLC
 RTS

* Subroutine to wait for line to clear

CLEAR
 LDA TIMEOUT
 PHA

 LDA #1
 STA TIMEOUT ;1 second timeout

:CLEAR JSR GETBYTE ;wait for line to clear
 BCC :CLEAR

 PLA
 STA TIMEOUT ;reset timeout
 RTS

MACBINCHK
 STZ MACBINARY

 LDA FILEBUF ;offset 0 should be 0
 BNE :NOT
 LDA FILEBUF+74 ;offset 74 as well
 BNE :NOT

 LDA FILEBUF+1 ;length of filename
 BEQ :NOT
 CMP #$64
 BGE :NOT ;must be from 1 - 63

* Calculate CRC of first 124 bytes

 STZ CRC
 STZ CRC+1

 LDY #0
:CLOOP LDA FILEBUF,Y
 JSR CRCCALC
 INY
 CPY #124
 BLT :CLOOP

* Check if CRC matches bytes at 124 and 125
* If so, is MacBinary II.

 LDA FILEBUF+124
 CMP CRC+1
 BNE :NOT
 LDA FILEBUF+125
 CMP CRC
 BNE :NOT

:YES LDA #$FF
 STA MACBINARY
:NOT RTS

FIXMAC
 JSR GETINFO
 BNE :ERROR

 LDA #$F2
 STA GETPARMS+4 ;save new file type

 LDA #7 ;parm count
 STA GETPARMS
 STZ GETPARMS+7 ;zero blocks used field
 STZ GETPARMS+8 ;as SET doesn't use it.
 STZ GETPARMS+9

 JSR MLI
 DFB $C3 ;SET_FILE_INFO
 DA GETPARMS ;point to packet buffer
 BNE :ERROR
 RTS

:ERROR JMP MLIERR
