 LST OFF

* SSC.Loader

* Instructions: 1) assemble this file as is.

* 2) change SSC.LOADER to LOCAL.LOADER
*    and change LOCAL=0 to =1 and assemble again.

* You can change the DSK pathname used to save the object
* code to whatever you desire.

 DSK SSC.LOADER

LOCAL = 0 ;set if LOCAL

BEGIN = $8C00 ;start of program
BEGIN0 = BEGIN-$300-$400 ;start of our buffers
   ;$300 for normal buffers
   ;$400 for file I/O buffer

OLDEXV = BEGIN+$04 ;to save old external vector
IRQV = BEGIN+$07 ;our IRQ handler address
PARSEV = BEGIN+$0B ;type cmd vector

* General equates

KEYBD = $C000
STROBE = $C010
MLI = $BF00
CROUT = $FD8E
GOSYSTEM = $BE70 ;MLI call
INBUF = $200 ;line input buf
ERROUT = $BE09 ;exit routine
BADCALL = $BE8B
SCLOSE = $BEDD ;close cmd parm area
EXTRNCMD = $BE06 ;JMP to address of cmd
DOSCMD = $BE03 ;basic.system mli vector
LEVEL = $BF94 ;file level
FREBUFR = $BEF8 ;free memory rtn
GETBFR = $BEF5 ;allocate memory rtn
MACHID = $BF98
KVERSION = $BFFF
VBLINT = $C019

* Environment routine equates

COUT = $FDED
MONZ = $FF69
RDKEY = $FD0C
PWRUP = $FAA6
HOME = $FC58 ;clear screen
TEXTON = $C051
COLD = $E000 ;AppleSoft coldstart
*DOS = $3D0
BI = $BE00
SETVID = $FE93

* Zero page use

PRTADR = $FA

 ORG $2000

ENVIRON CLD
 LDA #0
 STA UCFLAG
 LDA MLI ;check for ProDOS
 CMP #$4C
 BEQ :BAS
 JMP MNOPRO

:BAS LDA BI ;check for Basic.System
 CMP #$4C
 BEQ :OK
 JMP MNOBAS

* 0 = Unknown or non-Apple
* 1 = Apple II
* 2 = Apple II Plus
* 3 = Apple III
* 4 = Original Apple IIe
* 5 = Enhanced Apple IIe
* 6 = Original Apple IIc
* 7 = Apple IIc w/ 3.5 ROM
* 8 = Apple IIc w/ Mem. Exp.
* 9 = Apple IIc w/ Rev. Mem. Exp.
* 10 = Apple IIc Plus
* 11 = Apple IIGS w/ ROM 00
* 12 = Apple IIGS w/ ROM 01
* 13 = Apple IIGS w/ ROM 03
* 14 = Newer Apple IIGS
* 15 = Newer than Apple IIGS
* 16 = Apple IIe Card in Mac LC

:OK JSR IDENTIFY
 STA SYSID
 BNE :CHECK
 JMP MUNKNOWN
:CHECK CMP #3 ;Apple II or II Plus?
 BGE :A3 ;branch if not 1 or 2
 JMP MOLDCPU
:A3 CMP #3 ;Apple III
 BNE :MORE
 JMP MA3
:MORE LDA MACHID
 AND #%00000010 ;80 columns?
 BNE :AUXRAM
 JMP MNO80COL

:AUXRAM LDA MACHID
 AND #%00010000 ;128K?
 BNE :COL80
 JMP MNOAUXRAM

:COL80 JSR $C300 ;turn on 80 col. card

 LDA SYSID
 CMP #4 ;original IIe
 BNE :MORE2
 JMP MORGIIE

:MORE2 CMP #5
 BNE :CCHK
 JMP LOADER ;system okay

:CCHK CMP #11
 BGE :CHECK5
 JMP MAPIIC

:CHECK5 CMP #11
 BNE :CHECK6
 JMP MGSROM0

:CHECK6 CMP #14
 BGE :NEWCPU
 CMP #16
 BNE :GOLOAD
 JMP MLCCARD
:GOLOAD JMP LOADER ;system okay

:NEWCPU JMP MNEWCPU

* Error message routines

MNOPRO
 LDA SYSID
 CMP #2+1
 BGE :LOWER
 LDA #$FF
 STA UCFLAG
:LOWER CLC  ;clear screen and print
 JSR PRINT
 DA NOPRO
 JMP DOS ;exit to operating system

MNOBAS
 LDA SYSID
 CMP #2+1
 BGE :LOWER
 LDA #$FF
 STA UCFLAG
:LOWER CLC  ;clear screen and print
 JSR PRINT
 DA NOBAS
 LDX #$FF
 TXS
 JSR DELAY1
 JMP COLD

MUNKNOWN
 LDA SYSID
 CMP #2+1
 BGE :LOWER
 LDA #$FF
 STA UCFLAG
:LOWER CLC  ;clear screen and print
 JSR PRINT
 DA UNKNOWN
 LDX #$FF
 TXS
 JSR DELAY1
 JMP COLD

MA3
 CLC  ;clear screen and print
 JSR PRINT
 DA A3
 LDX #$FF
 TXS
 JSR DELAY1
 JMP COLD

MOLDCPU
 LDA SYSID
 CMP #2+1
 BGE :LOWER
 LDA #$FF
 STA UCFLAG
:LOWER CLC  ;clear screen and print
 JSR PRINT
 DA OLDCPU
 JMP DOS

MNO80COL
 LDA SYSID
 CMP #2+1
 BGE :LOWER
 LDA #$FF
 STA UCFLAG
:LOWER CLC  ;clear screen and print
 JSR PRINT
 DA NO80COL
 JMP DOS

MNOAUXRAM
 LDA SYSID
 CMP #2+1
 BGE :LOWER
 LDA #$FF
:LOWER CLC  ;clear screen and print
 JSR PRINT
 DA NOAUXRAM
 JMP DOS

MORGIIE
 CLC  ;clear screen and print
 JSR PRINT
 DA ORGIIE
 JMP DOS

MAPIIC CLC
 JSR PRINT
 DA APIIC
 JMP DOS

MGSROM0 CLC
 JSR PRINT
 DA GSROM0
 JSR DELAY1
 JMP LOADER

MNEWCPU CLC
 JSR PRINT
 DA NEWCPU
 JMP DOS

MLCCARD CLC
 JSR PRINT
 DA LCCARD
 JMP DOS

MAPTALK
 CLC  ;clear screen and print
 JSR PRINT
 DA APTALK
 JMP DOS

* Reserve space for Warp6.Driver & load into memory

LOADER
 LDA KVERSION
 CMP #$04
 BLT :NEXT

 JSR ATLKCHK
 BCC MAPTALK

:NEXT CLD
 JSR FREBUFR ;ensure memory available
 LDA #0
 STA LEVEL ;zero file level
 STA SCLOSE+1 ;indicate close for all files
 LDA #$CC ;do it
 CLD
 JSR GOSYSTEM ;execute close call using BI
 BCS ERROR

 LDA #$9A00-BEGIN0/$100 ;number of pages req'd

 JSR GETBFR
 BCS ERROR
 LDX #0
LOAD1 LDA CALL1,X ;load driver into memory
 BEQ LOAD2 ;with BLOAD cmd
 STA INBUF,X
 INX
 JMP LOAD1
LOAD2 JSR DOSCMD ;execute cmd through BI
 BCS ERROR
 LDA EXTRNCMD+1 ;save old external cmd vector
 STA OLDEXV+1
 LDA EXTRNCMD+2
 STA OLDEXV+2
 LDA #<PARSEV ;point to type cmd parser
 STA EXTRNCMD+1
 LDA #>PARSEV
 STA EXTRNCMD+2

 LST ON
 DO LOCAL-1/1
 JSR ALLOCATE ;allocate our 6551 IRQ handler
 FIN
 LST OFF

 JSR VBLTEST
 LDA FLAG80
 BNE NOT80
 LDA MACHID
 AND #%00000010 ;80 columns?
 BEQ NOT80
 JSR $C300 ;turn on 80 col. card
NOT80 RTS  ;return

ERROR JMP ERROUT
CALL1 ASC "BLOAD WARP6.DRIVER",8D00
FLAG80 DFB $00
SYSID DS 1

ALLOCATE SEI
 LDA $3FE
 STA IRQV
 LDA $3FF
 STA IRQV+1
 CLI
 RTS

* Other subroutines and data

PRINT BCS :BEGIN
 JSR CLEAR

 LDA PRTADR
 STA SAV1
 LDA PRTADR+1
 STA SAV2

:BEGIN PLA  ;low byte (from the JSR)
 TAX
 INX
 TXA
 BNE :NOHI ;if not zero, don't inc high byte
:INCHI STA :RETURN+1 ;low byte of pointer is zero
 STA :GETPTR+1 ;insert low byte of pointer
 PLA  ;get high byte
 TAX
 INX
 TXA
 STA :RETURN+2 ;save high byte of pointer
 STA :GETPTR+2 ;insert high byte of pointer
 JMP :NEXT
:NOHI STA :RETURN+1 ;save low byte of pointer
 STA :GETPTR+1 ;insert low byte of pointer
 PLA  ;get high byte
 STA :RETURN+2 ;save high byte of pointer
 STA :GETPTR+2
:NEXT LDX #0
:GETPTR LDA $FFAA,X ;get pointer data
 STA PRTADR,X ;save pointer
 INX
 CPX #2
 BLT :GETPTR ;if X < 2, get next byte
:START LDX #$00
:PRLOOP LDA (PRTADR,X) ;Load and print a char.
 BEQ :PROUT ;Exit on zero byte.
 JSR COUT
 INC PRTADR ;Increment address.
 BNE :PRLOOP
 INC PRTADR+1
 JMP :PRLOOP
:PROUT INC :RETURN+1
 BEQ :DOHI
:AFTER INC :RETURN+1
 BEQ :DOHI
:GOBACK SEC

 LDA SAV1
 STA PRTADR
 LDA SAV2
 STA PRTADR+1

:RETURN JMP $FFFF ;return to the program.
:DOHI INC :RETURN+2
 JMP :AFTER

CLEAR JSR HOME
 RTS

SAV1 DS 1
SAV2 DS 1

**************************
* IDENTIFIER Source Code *
* by Jim Ferr            *
* Adapted for Warp Six   *
**************************

* Identify the system and return result in A

IDENTIFY LDA $C081 ;read from ROM

 SEC  ;see if new or old machine
 JSR $FE1F ;old machines have RTS here.
 BCS :OLD ;if carry still set, old.
 BCC :NEW ;if carry clear, new.

:OLD LDA $FBB3
 CMP #$38 ;old Apple II
 BEQ :A2
 CMP #$EA ;II Plus or Apple III
 BEQ :A2OR3
 CMP #$06
 BNE :BAD ;unknown

 LDA $FBC0
 BEQ :A2CFAM ;IIc family
 CMP #$EA
 BEQ :OLD2E ;unenhanced IIe
 CMP #$E0
 BNE :BAD ;unknown

* Determine if IIe enhanced or IIe Card in Mac LC

 LDA $FBDD
 CMP #$02
 BNE :NEW2E
 LDA $FBBE
 CMP #$00
 BNE :NEW2E
 BEQ :MACLC

:A2CFAM LDA $FBBF ;determine which IIc
 BEQ :A2C2 ;with 3.5 ROM
 CMP #$FF
 BEQ :A2C1 ;original IIc
 CMP #$03
 BEQ :A2C3 ;with org. mem. exp.
 CMP #$04
 BEQ :A2C4 ;with rev. mem. exp.
 CMP #$05
 BEQ :A2CPLUS ;IIc Plus
 BNE :BAD ;unknown

:A2OR3 LDA $FB1E
 CMP #$AD
 BEQ :A2PLUS ;II Plus
 CMP #$8A
 BNE :BAD ;unknown if not

 LDA #3 ;Apple III
 RTS

:BAD LDA #0 ;unknown machine
 RTS

:A2 LDA #1 ;original Apple II
 RTS

:A2PLUS LDA #2 ;Apple II Plus
 RTS

:OLD2E LDA #4 ;original IIe
 RTS

:NEW2E LDA #5 ;enhanced IIe
 RTS

:A2C1 LDA #6 ;original Apple IIc
 RTS
:A2C2 LDA #7 ;IIc w/ 3.5 ROM
 RTS
:A2C3 LDA #8 ;IIc w/ org. mem exp.
 RTS
:A2C4 LDA #9 ;IIc w/ rev. mem exp.
 RTS

:A2CPLUS LDA #10 ;IIc Plus
 RTS

:NEW CLC  ;get into 16 bit mode
 DFB $FB ;XCE
 PHP  ;save processor status
 DFB $C2
 DFB $30 ;REP 30, sets 16 bit
 JSR $FE1F ;call ID routine again
 STY :NEWY
 PLP  ;restore 8 bit status
 DFB $FB ;XCE

 LDA :NEWY+1 ;get Machine ID number
 BNE :NEWER ;newer than IIgs

 LDA :NEWY ;ROM version number
 BEQ :GSROM00 ;ROM 00
 CMP #$01
 BEQ :GSROM01 ;ROM 01
 CMP #$03
 BEQ :GSROM03 ;ROM 03
 BNE :NEWGS ;new GS

:GSROM00 LDA #11
 RTS
:GSROM01 LDA #12
 RTS
:GSROM03 LDA #13
 RTS
:NEWGS LDA #14
 RTS
:NEWER LDA #15
 RTS
:MACLC LDA #16
 RTS

* Storage

:NEWY DW $0000

DELAY1 LDA DELAY1B delay a little over 1 second
 STA :DELAY
:LOOP LDY #$FF
 JSR DELAYMS
 DEC :DELAY
 BNE :LOOP
 RTS
:DELAY DFB 0

* DELAYMS: pause for Y=ms

DELAYMS CPY #0
 BEQ :DELAYOUT
 NOP
 CPY #1
 BNE :DA
 JMP :FINAL

:DA DEY

:D0 LDX #202

:D1 DEX
 BNE :D1
 NOP
 NOP
 DEY
 BNE :D0

:FINAL LDX #199

:D2 DEX
 BNE :D2

:DELAYOUT RTS

DELAY1B DFB 25

* Test if this machine has VBL. Sets NONVBL flag.

VBLTEST LDX #$FF
 LDY #$25
:TESTVBL LDA VBLINT
 BPL :NOCHANGE
 BMI :GOOD
:NOCHANGE DEX  ;dec 1st counter
 BNE :TESTVBL ;loop if non-zero
 DEY  ;dec 2nd counter
 BNE :TESTVBL ;loop if non-zero
:BAD
 CLC
 JSR PRINT
 DA NOVBL
 JMP DOS

:GOOD RTS

 PUT ERRORS

DOS EQU *


 LDA SYSID
 CMP #2+1
 BGE :LOWER
 LDA #$FF
 STA UCFLAG
:LOWER SEC  ;don't clear screen
 JSR PRINT
 DA EXIT

:KEYWAIT LDA KEYBD
 BPL :KEYWAIT
 STA STROBE
   ;and fall through.

QUIT JSR MLI
 DFB $65 ;Quit call
 DA :QPARMS
 BRK
 BRK

:QPARMS DFB 4
 DFB 0
 DW $0000
 DFB 0
 DW $0000

EXIT HEX 8D
 ASC "Press Return to exit : ",00

UPSHIFT CMP #"z"+1
 BGE :NO
 CMP #"a"
 BLT :NO
 AND #%11011111 convert to uppercase
:NO RTS

UCFLAG DFB 0

ATLKCHK JSR MLI
 DFB $42 ;AppleTalk
 DW APPARMS
 RTS  ;If carry set, AppleTalk off.

APPARMS DFB $00 ;anynchronous call
 DFB $02 ;GetInfo call number
ARESULT DS 13 ;result
