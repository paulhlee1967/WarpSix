* Source code Read Me
* Written by & in memory of Jim Ferr
* Updated by Scott Johnson & Paul Lee
* March, 2022
*
* Public Domain version 4.0
*
* Here are some tidbits of information about the source code to Warp Six
* BBS to help those who will follow me.
*
* Jim Ferr, Whitby, Ontario.
*
*
* The source code for the modem drivers in Warp Six BBS were written with
* the Merlin assembler. To use the source files to create the modem drivers
* and Xmodem module, you only have to assemble a few of the files, some of
* them more than once after making a small change. Each file contains some
* instructions on this. To assemble the GS.LOADER, you will need Merlin 16
* or Merlin 16+. (Merlin 16+ is many times faster than older versions of
* Merlin.)
*
* The following table shows which source files you must assemble to get the
* object files (actual drivers) the system uses:
*
* Source file       Object file     Description
*
* LOCAL.LOADER.S -> LOCAL.LOADER    Local (modem disabled) loader
* LOCAL.MASTER.S -> LOCAL.DRIVER    Local (modem disabled) driver
*
* SSC.LOADER.S ---> SSC.LOADER      Loads SSC driver
* SSC.MASTER.S----> SSC.DRIVER      Super Serial card driver
*
* GS.LOADER.S ----> GS.LOADER       Loads GS driver
* GS.MASTER.S ----> GS.DRIVER       GS driver
*
* CLOADER.S ------> CLOADER         Loads Copy
* COPY.S ---------> COPY            Copy program (copy filename1,filename2)
*
* XCAT.S ---------> XCAT            Custom Warp6 catalog command (List in Xfer.Util)
*
* SEND.MASTER.S --> SEND            Downloads files to client
* RECV.MASTER.S --> RECV            Uploads files from client
*
* The Loader programs share the ERRORS.S file, which holds loader error
* messages. The GS.LOADER uses macros in GSLOAD.MACS.S. The modem drivers
* all share the following files:
*
* Source file      Comment
*
* EQU.S            Contains system equates
* MAIN.S           Main vectors and short routines
* GETLN.S          line input routine
* FILTER.S         input filter
* OUTPUT.S         output routine
* TOBASIC.S        pass data to BASIC
* WRAP.S           word wrap routines
* CURSOR.S         cursor routines
* SHIFT.S          case shift routines
* PARSE.S          parse BI cmd
* TYPE.S           TYPE command
* WARNINGS.S       warning msgs
* LOGON.S          logon routine
* RIGHTS.S         copyright routine
* END.S & END2.S   warn if driver doesn't fit in memory allocated by ORG
* INPUT.ANY.S      line input routine which accepts "illegal" characters.
* COPYCAT.S        ML helper for COPY.UTIL in sysop menu for selecting files.
*
* In addition, each driver uses a hardware specific source file. The
* SSC.DRIVER uses the SSC.RTNS.S file, The GS.DRIVER file uses the GS.RTNS.S
* file, and the LOCAL.DRIVER uses the LOCAL.RTNS.S file.
*
*** GS Drivers Only***
* When compiling your drivers, Merlin will show memory addresses for SERGET3,
* IRQMAST, & QUICK upon completion. You must enter these addresses in the EQUs
* in the matching LOADER program for the driver you're compiling and then compile
* the loader. 
*
* Finally, to create the SEND and RECV modules, you need to assemble 
* SEND.MASTER.S & RECV.MASTER.S. SEND.MASTER.S uses the XEQU, XYGLOBALS, SEND,
* & CRC files. RECV.MASTER.S uses the XEQU, XYGLOBALS, RECV, & CRC files.
*
* Two additional small files, END.S and END2.S, are used to ensure your assembled
* object code has not gone beyond the available memory. If this occurs, you'll
* get an error during assembly and you'll need to trim some code or adjust the
* ORG address before recompiling.
*
* Memory Usage
*
* The Loader program (whether it is SSC.LOADER, LOCAL.LOADER or
* GS.LOADER) is responsible for reserving memory from BASIC.System for the
* modem driver, loading the modem driver into memory, and some other
* important tasks.
*
* VERY IMPORTANT: For actual use with Warp Six BBS, your loader must be
* renamed "WARP6.LOADER" and your driver must be renamed "WARP6.DRIVER".
*
* The following table shows the memory used by the system:
*
* $9AFF and above is BASIC.System and ProDOS
*
* $8C00 to $99FF is the memory space the modem driver occupies
* $8B00 to $8BFF is MBUF, the modem input buffer
* $8A00 to $8AFF is LINBUF, the line input buffer
* $8900 to $89FF is WWBUF, the word wrap buffer
* $8500 to $88FF is IOBUF, the driver's ProDOS file I/O buffer
* &8000 to $84FF is COPY, SEND, or RECV. They load, run, and unload.
* $7C00 to $84FF is XCAT. It loads, runs, and unloads.
* $300  to $3CF  is INPUT.ANY. Line input utility.
* $300  to $3CF  is COPYCAT. Copy.Util helper program for selecting files.
*
* When external modules are not running, that's it for Warp Six memory use.
* (External modules are COPY, SEND, RECV and XCAT.)
*
* The BASIC programs, as usual, start a $800 and work up from there, and
* BASIC variables work down from below our IOBUF.
